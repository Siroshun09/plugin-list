// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Plugin defines model for Plugin.
type Plugin struct {
	// FileName File name of the plugin
	FileName string `json:"file_name"`

	// LastUpdated Unix time when the plugin was last updated
	LastUpdated int64 `json:"last_updated"`

	// PluginName Name of the plugin
	PluginName string `json:"plugin_name"`

	// ServerName Name of the server
	ServerName string `json:"server_name"`

	// Type Type of the plugin
	Type string `json:"type"`

	// Version Version of the plugin
	Version string `json:"version"`
}

// AddPluginJSONRequestBody defines body for AddPlugin for application/json ContentType.
type AddPluginJSONRequestBody = Plugin

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the list of installed plugins
	// (GET /plugins/{server_name})
	GetPluginsByServer(w http.ResponseWriter, r *http.Request, serverName string)
	// Add or update the plugin
	// (POST /plugins/{server_name})
	AddPlugin(w http.ResponseWriter, r *http.Request, serverName string)
	// Delete the specified plugin from the list
	// (DELETE /plugins/{server_name}/{plugin_name})
	DeletePlugin(w http.ResponseWriter, r *http.Request, serverName string, pluginName string)
	// Get the list of servers
	// (GET /servers/)
	GetServerNames(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get the list of installed plugins
// (GET /plugins/{server_name})
func (_ Unimplemented) GetPluginsByServer(w http.ResponseWriter, r *http.Request, serverName string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or update the plugin
// (POST /plugins/{server_name})
func (_ Unimplemented) AddPlugin(w http.ResponseWriter, r *http.Request, serverName string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete the specified plugin from the list
// (DELETE /plugins/{server_name}/{plugin_name})
func (_ Unimplemented) DeletePlugin(w http.ResponseWriter, r *http.Request, serverName string, pluginName string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of servers
// (GET /servers/)
func (_ Unimplemented) GetServerNames(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetPluginsByServer operation middleware
func (siw *ServerInterfaceWrapper) GetPluginsByServer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "server_name" -------------
	var serverName string

	err = runtime.BindStyledParameterWithOptions("simple", "server_name", chi.URLParam(r, "server_name"), &serverName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "server_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPluginsByServer(w, r, serverName)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddPlugin operation middleware
func (siw *ServerInterfaceWrapper) AddPlugin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "server_name" -------------
	var serverName string

	err = runtime.BindStyledParameterWithOptions("simple", "server_name", chi.URLParam(r, "server_name"), &serverName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "server_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPlugin(w, r, serverName)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePlugin operation middleware
func (siw *ServerInterfaceWrapper) DeletePlugin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "server_name" -------------
	var serverName string

	err = runtime.BindStyledParameterWithOptions("simple", "server_name", chi.URLParam(r, "server_name"), &serverName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "server_name", Err: err})
		return
	}

	// ------------- Path parameter "plugin_name" -------------
	var pluginName string

	err = runtime.BindStyledParameterWithOptions("simple", "plugin_name", chi.URLParam(r, "plugin_name"), &pluginName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "plugin_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePlugin(w, r, serverName, pluginName)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetServerNames operation middleware
func (siw *ServerInterfaceWrapper) GetServerNames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServerNames(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/plugins/{server_name}", wrapper.GetPluginsByServer)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/plugins/{server_name}", wrapper.AddPlugin)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/plugins/{server_name}/{plugin_name}", wrapper.DeletePlugin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/servers/", wrapper.GetServerNames)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWS2/bOBD+K8TsHrWW88AefEuw2yKXNkAfl8AwWHNks5FIhhwlMQz994KkZFkPt26d",
	"g0+WOZyP38x8nOEWlrowWqEiB7MtuOUaCx4+/7dWW/9hrDZoSWJYXmqB/legW1ppSGoFs7iZBVsCmbYF",
	"J5iBVHR1CQnQxmD8iyu0UCVQoHN8dRCoMe9cHVmpVlBVCVh8KqVFAbMHqA9sts+rBO7zciWVB+Z5/jGD",
	"2UM/gkzmuFC8GDn9ncyReRPTGaM1MhPRBjwSyLmjRWkEJ0+lD/RFyVdGskD2ska1B8VeuGPelzW+3Xz9",
	"ez2ar+h8gPWHowg7tM9oj4CIG8cg4kLf9/PGDI/HV16Y3Lt/Kx8fJS0OE3tG6wJSH/hrNPwqtJ4m9lPV",
	"jTrZK317bI3Xq+i8mlceWapMD5nFM/7JpSN2c3/nMSSFaIeWXXhwMZlOpj5ibVBxI2EGV5Pp5AoSMJzW",
	"QZxpBHDpdo955S0rpCGR90ghN+E8ndU5cozWnBi3yKRyxPMcBZNRhs7gUmYSRVtnfzm4B7wTETLeIXe7",
	"+dRsMdzyAgmtCxeqS6IVTbw7pNkKqeECPok+M5zWkEDUX68ubf3IlpjUbciH26/13G92RisXL/PldBq7",
	"kiJUIUHcmFwuQzzpdxd11eJJwiI4/m0xgxn8lbYNMK27X1r3kJ3igVvLNxAEMQz9hNwHvIyXOf1WED/j",
	"Htv2CNVS4avBJaFgWO9JwJVFwe1mREkt+aaOvg1pNyLCGyGYtnVD617VrrRuhLhvLOelqKcSHd1qsXmz",
	"OjQaGhYiWnxMXAj/06R9QLs6Uex/xq8eVM3J5yTSg0rz28ZbZ7rdGwhVFG+ONDLH/gvrvYtaJyOzutiv",
	"U1fX0fMkafs5418BY/PuDcWejNGpYzyBTnfmntLNrw8NWxbLJs5JjscrJugzFs2lR0/z2mFsRMfJ7J9t",
	"Dk7sErun2gMQOlpc+OeM/7iEedIOzAOvweNmYxPJGQ+8HcWqqn4EAAD//ysYa74XDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
