// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/custom_data_usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase/custom_data_usecase.go -destination=usecase/mock/custom_data_usecase.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/Siroshun09/plugin-list/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomDataUseCase is a mock of CustomDataUseCase interface.
type MockCustomDataUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCustomDataUseCaseMockRecorder
}

// MockCustomDataUseCaseMockRecorder is the mock recorder for MockCustomDataUseCase.
type MockCustomDataUseCaseMockRecorder struct {
	mock *MockCustomDataUseCase
}

// NewMockCustomDataUseCase creates a new mock instance.
func NewMockCustomDataUseCase(ctrl *gomock.Controller) *MockCustomDataUseCase {
	mock := &MockCustomDataUseCase{ctrl: ctrl}
	mock.recorder = &MockCustomDataUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomDataUseCase) EXPECT() *MockCustomDataUseCaseMockRecorder {
	return m.recorder
}

// AddOrUpdateKey mocks base method.
func (m *MockCustomDataUseCase) AddOrUpdateKey(ctx context.Context, key domain.CustomDataKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateKey indicates an expected call of AddOrUpdateKey.
func (mr *MockCustomDataUseCaseMockRecorder) AddOrUpdateKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateKey", reflect.TypeOf((*MockCustomDataUseCase)(nil).AddOrUpdateKey), ctx, key)
}

// AddOrUpdatePluginInfo mocks base method.
func (m *MockCustomDataUseCase) AddOrUpdatePluginInfo(ctx context.Context, pluginName string, data []domain.PluginCustomData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdatePluginInfo", ctx, pluginName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdatePluginInfo indicates an expected call of AddOrUpdatePluginInfo.
func (mr *MockCustomDataUseCaseMockRecorder) AddOrUpdatePluginInfo(ctx, pluginName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdatePluginInfo", reflect.TypeOf((*MockCustomDataUseCase)(nil).AddOrUpdatePluginInfo), ctx, pluginName, data)
}

// ExistsKey mocks base method.
func (m *MockCustomDataUseCase) ExistsKey(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsKey", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsKey indicates an expected call of ExistsKey.
func (mr *MockCustomDataUseCaseMockRecorder) ExistsKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsKey", reflect.TypeOf((*MockCustomDataUseCase)(nil).ExistsKey), ctx, key)
}

// GetKeys mocks base method.
func (m *MockCustomDataUseCase) GetKeys(ctx context.Context) ([]domain.CustomDataKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", ctx)
	ret0, _ := ret[0].([]domain.CustomDataKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockCustomDataUseCaseMockRecorder) GetKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockCustomDataUseCase)(nil).GetKeys), ctx)
}

// GetPluginInfo mocks base method.
func (m *MockCustomDataUseCase) GetPluginInfo(ctx context.Context, pluginName string) ([]domain.PluginCustomData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginInfo", ctx, pluginName)
	ret0, _ := ret[0].([]domain.PluginCustomData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo.
func (mr *MockCustomDataUseCaseMockRecorder) GetPluginInfo(ctx, pluginName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockCustomDataUseCase)(nil).GetPluginInfo), ctx, pluginName)
}

// SearchForKey mocks base method.
func (m *MockCustomDataUseCase) SearchForKey(ctx context.Context, key string) (*domain.CustomDataKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForKey", ctx, key)
	ret0, _ := ret[0].(*domain.CustomDataKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForKey indicates an expected call of SearchForKey.
func (mr *MockCustomDataUseCaseMockRecorder) SearchForKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForKey", reflect.TypeOf((*MockCustomDataUseCase)(nil).SearchForKey), ctx, key)
}
