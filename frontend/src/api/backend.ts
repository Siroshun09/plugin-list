/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * plugin-list API
 * plugin-list API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
/**
 * Access token is missing or invalid
 */
export type UnauthorizedErrorResponse = void;

export interface Error {
  /** Error code */
  code: number;
  /** Error message */
  message: string;
}

export type PluginAllOf = {
  /** File name of the plugin */
  file_name: string;
  /** Unix time when the plugin was last updated */
  last_updated: number;
  /** Name of the plugin */
  plugin_name: string;
  /** Name of the server */
  server_name: string;
  /** Type of the plugin */
  type: string;
  /** Version of the plugin */
  version: string;
};

export type Plugin = PluginAllOf;





/**
 * Get the list of servers
 * @summary Get the list of servers
 */
export const getServerNames = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string[]>> => {
    
    return axios.get(
      `/servers/`,options
    );
  }


export const getGetServerNamesQueryKey = () => {
    return [`/servers/`] as const;
    }

    
export const getGetServerNamesQueryOptions = <TData = Awaited<ReturnType<typeof getServerNames>>, TError = AxiosError<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServerNames>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServerNamesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServerNames>>> = ({ signal }) => getServerNames({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServerNames>>, TError, TData> & { queryKey: QueryKey }
}

export type GetServerNamesQueryResult = NonNullable<Awaited<ReturnType<typeof getServerNames>>>
export type GetServerNamesQueryError = AxiosError<Error>

/**
 * @summary Get the list of servers
 */
export const useGetServerNames = <TData = Awaited<ReturnType<typeof getServerNames>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServerNames>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetServerNamesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Get the list of plugins that are installed in the specified server
 * @summary Get the list of installed plugins
 */
export const getPluginsByServer = (
    serverName: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Plugin[]>> => {
    
    return axios.get(
      `/servers/${serverName}/plugins`,options
    );
  }


export const getGetPluginsByServerQueryKey = (serverName: string,) => {
    return [`/servers/${serverName}/plugins`] as const;
    }

    
export const getGetPluginsByServerQueryOptions = <TData = Awaited<ReturnType<typeof getPluginsByServer>>, TError = AxiosError<Error>>(serverName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPluginsByServer>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPluginsByServerQueryKey(serverName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPluginsByServer>>> = ({ signal }) => getPluginsByServer(serverName, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(serverName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPluginsByServer>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPluginsByServerQueryResult = NonNullable<Awaited<ReturnType<typeof getPluginsByServer>>>
export type GetPluginsByServerQueryError = AxiosError<Error>

/**
 * @summary Get the list of installed plugins
 */
export const useGetPluginsByServer = <TData = Awaited<ReturnType<typeof getPluginsByServer>>, TError = AxiosError<Error>>(
 serverName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPluginsByServer>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPluginsByServerQueryOptions(serverName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Add or update the plugin
 * @summary Add or update the plugin
 */
export const addPlugin = (
    serverName: string,
    plugin: Plugin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Plugin>> => {
    
    return axios.post(
      `/servers/${serverName}/plugins`,
      plugin,options
    );
  }



export const getAddPluginMutationOptions = <TError = AxiosError<UnauthorizedErrorResponse | Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPlugin>>, TError,{serverName: string;data: Plugin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addPlugin>>, TError,{serverName: string;data: Plugin}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPlugin>>, {serverName: string;data: Plugin}> = (props) => {
          const {serverName,data} = props ?? {};

          return  addPlugin(serverName,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPluginMutationResult = NonNullable<Awaited<ReturnType<typeof addPlugin>>>
    export type AddPluginMutationBody = Plugin
    export type AddPluginMutationError = AxiosError<UnauthorizedErrorResponse | Error>

    /**
 * @summary Add or update the plugin
 */
export const useAddPlugin = <TError = AxiosError<UnauthorizedErrorResponse | Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPlugin>>, TError,{serverName: string;data: Plugin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof addPlugin>>,
        TError,
        {serverName: string;data: Plugin},
        TContext
      > => {

      const mutationOptions = getAddPluginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete the specified plugin from the list
 * @summary Delete the specified plugin from the list
 */
export const deletePlugin = (
    serverName: string,
    pluginName: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/servers/${serverName}/plugins/${pluginName}`,options
    );
  }



export const getDeletePluginMutationOptions = <TError = AxiosError<UnauthorizedErrorResponse | Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePlugin>>, TError,{serverName: string;pluginName: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePlugin>>, TError,{serverName: string;pluginName: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePlugin>>, {serverName: string;pluginName: string}> = (props) => {
          const {serverName,pluginName} = props ?? {};

          return  deletePlugin(serverName,pluginName,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePluginMutationResult = NonNullable<Awaited<ReturnType<typeof deletePlugin>>>
    
    export type DeletePluginMutationError = AxiosError<UnauthorizedErrorResponse | Error>

    /**
 * @summary Delete the specified plugin from the list
 */
export const useDeletePlugin = <TError = AxiosError<UnauthorizedErrorResponse | Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePlugin>>, TError,{serverName: string;pluginName: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePlugin>>,
        TError,
        {serverName: string;pluginName: string},
        TContext
      > => {

      const mutationOptions = getDeletePluginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
